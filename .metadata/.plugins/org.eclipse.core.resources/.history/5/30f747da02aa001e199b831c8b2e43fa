package com.springrest.springrest.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.springrest.springrest.Response.ResponseHandler;
import com.springrest.springrest.advice.CourseNotFoundException;
import com.springrest.springrest.entities.Course;
import com.springrest.springrest.services.CourseService;

import jakarta.validation.Valid;

@RestController
public class MyContoller {

	@Autowired
	private CourseService courseservice;

	//get all available courses
	@GetMapping("/courses")
	public ResponseEntity<Object> getAll()
	{
		List<Course> courses=courseservice.getCourses() ;
		if(courses.isEmpty())
		{
			throw new CourseNotFoundException("Courses not found");
		}
		return ResponseHandler.generateResponse("Data retrieved succesfully!!",HttpStatus.OK, courses);	
	}



	//get a particular course
	@GetMapping("/courses/{CourseId}")
	public ResponseEntity<Object> get(@PathVariable long CourseId )
	{
		Optional<Course> course= courseservice.getCourse(CourseId);
		if( course.isPresent())
		{
			System.out.println(course.get());
			return ResponseHandler.generateResponse("Data retrieved succesfully!!",HttpStatus.OK, course.get());
		}
		throw new CourseNotFoundException("Course not found with id: "+CourseId);
	}



	//adding course
	@PostMapping("/courses")
	public ResponseEntity<Object>  createCourse(@Valid @RequestBody Course course)
	{
		Course c=null;
		List<Course> courses=courseservice.getCourses();
		if(courses.isEmpty())
		{
			c = courseservice.addCourse(course);
		}
		else
		{
			for(Course a:courses)
			{
				if(a.getTitle()==course.getTitle())
				{
					System.out.println("hgkjhlkhlk");
					throw new CourseNotFoundException("Record already exists!!");
				}else
				{
					c = courseservice.addCourse(course);
				}
			}
		}
		
		return ResponseHandler.generateResponse("Data added Succesfully!!", HttpStatus.CREATED, c);
	}



	//updating existing course
	@PutMapping("/courses/{CourseId}")
	public ResponseEntity<Course> update(@ Valid @RequestBody Course course,@PathVariable long CourseId)
	{
		List<Course> courses=courseservice.getCourses();
		Course C=null;
		for(Course c:courses)
		{
			if( c.getId()==CourseId)
			{
				C=courseservice.updateCourse(course, CourseId);
			}else
			{
				throw new CourseNotFoundException("Course not found with id: "+CourseId);
			}
		}
		return new ResponseEntity<Course>(C,HttpStatus.CREATED);
	}



	//delete a particular existing course
	@DeleteMapping("/courses/{CourseId}")
	public ResponseEntity<String> DeleteCourse(@PathVariable long CourseId)
	{
		Optional<Course> course= courseservice.getCourse(CourseId);
		if( course.isPresent())
		{
			courseservice.delete(CourseId);
			System.out.println("Course deleted with id: "+CourseId);
			return new ResponseEntity<String>("Course deleted with id: "+CourseId, HttpStatus.NO_CONTENT);
		}
		throw new CourseNotFoundException("Course not found with id: "+CourseId);
	}



	//delete all available course
	@DeleteMapping("/courses")
	public ResponseEntity<String>  deleteAllCourses()
	{
		this.courseservice.deleteAll();
		System.out.println("All Records Deleted!!");
		return new ResponseEntity<String>("All Records Deleted!!",HttpStatus.NO_CONTENT); 
	}

}
